namespace com.dialogTwo

import com.amazon.alexa.ask.conversations.*
import com.amazon.alexa.schema.*
import com.amazon.ask.types.builtins.AMAZON.*
import prompts.*
import slotTypes.*

// API Action

action orderStatus cookingAPI(Food foodName, List<Mix> addOn)

// UtteraceSets 

InvokeEvent = utterances(
  samples = [
    "let us cook"
  ]
)

informlistAddOnsEvent = utterances<addOnType>(
  samples = [
    "{addOn}",
    "add {addOn}",
    "mix {addOn}"
  ]
)

informFoodNameEvent = utterances<foodNameType>(
  samples = [
    "{foodName}",
    "food is {foodName}",
    "let us make {foodName}"
  ]
)

affirmCookAPIEvent = utterances(
  samples = [
    "ok",
    "that is ok",
    "ok for sure"
  ]
)

// Type

type foodNameType {
  Food foodName
}

type addOnType {
  List<Mix> addOn
}

type responsePayloadType {
  orderStatus status
}

type payloadConfirmActionType {
  optional Food foodName
  List<Mix> addOn
}

dialog Nothing dialogTwo() {

  sample {
    expect(act = Invoke, event = InvokeEvent)
    response(response = request_listAddOns_apla, act = Request {arguments = [cookingAPI.arguments.addOn]})
    listAddOnsEvent = expect(act = Inform, event = informlistAddOnsEvent)
    response(response = request_mainFoodName_apla, act = Request {arguments = [cookingAPI.arguments.foodName]})
    FoodNameEvent = expect(act = Inform, event = informFoodNameEvent)
    response(response = confirm_main_addon_list_apla, act = ConfirmAction {actionName = cookingAPI}, 
      payload = payloadConfirmActionType {foodName = FoodNameEvent.foodName, addOn = listAddOnsEvent.addOn})
    expect(act = Affirm, event = affirmCookAPIEvent)
    apiResponse = cookingAPI(foodName = FoodNameEvent.foodName, addOn = listAddOnsEvent.addOn)
    response(response = success_cookingAPI_apla, act = Notify {actionName = cookingAPI},
      payload = responsePayloadType {status = apiResponse})
  }

}