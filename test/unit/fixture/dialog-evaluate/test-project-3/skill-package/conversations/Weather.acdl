namespace com.weatherbot

import com.amazon.alexa.ask.conversations.Invoke
import com.amazon.alexa.ask.conversations.Notify
import com.amazon.alexa.ask.conversations.RequestArguments
import com.amazon.alexa.ask.conversations.ensure
import com.amazon.alexa.ask.conversations.expect
import com.amazon.alexa.ask.conversations.response
import com.amazon.alexa.ask.conversations.utterances
import com.amazon.alexa.schema.Nothing
import com.amazon.alexa.schema.Thing
import com.amazon.ask.types.builtins.AMAZON.DATE
import com.amazon.ask.types.builtins.AMAZON.NUMBER
import com.amazon.ask.types.builtins.AMAZON.US_CITY
import prompts.request_city_apla
import prompts.request_date_apla

import slotTypes.*
import prompts.*
import displays.*
import com.amazon.ask.types.builtins.AMAZON.*
import com.amazon.alexa.schema.*
import com.amazon.alexa.ask.conversations.*

type CityAndDate {
  optional myCustomCities cityNameChanged
  optional US_CITY cityName
  optional DATE date
}


@locale(Locale.en_US)
getWeatherEvent_enUS = utterances<CityAndDate>(
  samples = [
    "What's the weather {date} in {cityNameChanged}",
    "What's the weather {date} in {cityName}",
    "What is the weather {date} in {cityName}",
    "what is the weather {date}",
    "how is weather"
  ]
)


@locale(Locale.de_DE)
getWeatherEvent_deDE = utterances<CityAndDate>(
  samples = [
    "Wie ist das wetter {date} in {cityNameChanged}",
    "wie ist das wetter {date} in {cityName}",
    "wie ist das wetter {date}",
    "wie ist das wetter"
  ]
)

getWeatherEvent = variations(getWeatherEvent_enUS,getWeatherEvent_deDE)

@locale(Locale.en_US)
weather_apla_en = apla("../../skill-package/response/prompts/weather_apla")

@locale(Locale.de_DE)
weather_apla_de = apla("../../skill-package/response/prompts/weather_apla_de_apla")

weather_apla_apla_apla = variations(weather_apla_en,weather_apla_de)


type cityNameshell{
    US_CITY cityName
}

@locale(Locale.en_US)
weather_apl_visual_en = apl<cityNameshell>("../../skill-package/response/display/confirm_weather_apla_display")

@locale(Locale.de_DE)
weather_apl_visual_de = apl ("../../skill-package/response/display/display_de_apl")

weather_apl_visual = variations(weather_apl_visual_en, weather_apl_visual_de)

weather_apla_var = MultiModalResponse (apla = weather_apla_apla_apla, apl = weather_apl_visual)

/*
what's the weather today in seattle
what is the weather today in madurai
what's the weather today in chennai
what's the weather today in speaker

*/



type WeatherResult {
  optional myCustomCities cityNameChanged
  optional US_CITY cityName
  NUMBER highTemp
  NUMBER lowTemp
}

type ResponsePayload {
  WeatherResult weatherResult
}

action WeatherResult getWeather(DATE date, US_CITY cityName = nothing, myCustomCities cityNameChanged = nothing)

dialog Nothing Weather() {
  sample {
    weatherRequest = expect(act = Invoke,event = getWeatherEvent)
    ensure(
requestArgs = [
            RequestArguments<Thing> {arguments = [ getWeather.arguments.cityNameChanged],response = request_city_apla},
            RequestArguments<Thing> {arguments = [ getWeather.arguments.cityName],response = request_city_apla},
            RequestArguments<Thing> { arguments = [getWeather.arguments.date],response = request_date_apla}
      ]
    )
    weatherResult = getWeather(date = weatherRequest.date, cityName =  weatherRequest.cityName)
    response(
      response = weather_apla_var,
      act = Notify {actionName = getWeather},
      payload = ResponsePayload { weatherResult = weatherResult}
    )
  }

  sample {
    weatherRequest = expect(act = Invoke,event = getWeatherEvent)
    ensure(
requestArgs = [
            RequestArguments<Thing> {arguments = [ getWeather.arguments.cityNameChanged],response = request_city_apla},
            RequestArguments<Thing> {arguments = [ getWeather.arguments.cityName],response = request_city_apla},
            RequestArguments<Thing> { arguments = [getWeather.arguments.date],response = request_date_apla}
      ]
    )
    weatherResult = getWeather(date = weatherRequest.date, cityNameChanged = weatherRequest.cityNameChanged)
    response(
      response = weather_apla_var,
      act = Notify {actionName = getWeather},
      payload = ResponsePayload { weatherResult = weatherResult}
    )
  }
}

dialog Nothing ComplexTest() {
  sample {
    Weather()
  }
}



type weatherRequestEvent0 { 
    optional myCustomCities cityNameChanged 
    optional US_CITY cityName 
    DATE date
}


