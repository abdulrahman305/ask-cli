namespace testSatheesh
import prompts.*
import displays.*
import com.amazon.alexa.ask.conversations.*
import com.amazon.alexa.schema.*
import com.weatherbot.apis.*
import slotTypes.*
import com.weatherbot.utteracesets.*

type PAYLOAD_TYPE5 {
    resultthree result
  }
  

type PAYLOAD_TYPE3 {
    customColor colorName
  }

  type PAYLOAD_TYPE4 {
    customColor colorName
  }
  
  type payloadgetFruitPriceEvent {
    result result
  }

@locale(Locale.en_US, Locale.en_GB)
affirmMultipleColorEvent_enUSenGB = utterances(
  samples = [
    "do it"
  ]
)

@locale(Locale.de_DE)
affirmMultipleColorEvent_deDE = utterances(
  samples = [
    "tu es"
  ]
)
affirmMultipleColorEvent = variations(affirmMultipleColorEvent_enUSenGB, affirmMultipleColorEvent_deDE)


@locale(Locale.de_DE)
whoAmiExpectInvoke_german = utterances(
  samples = [
      "Wer bin ich",
    "sag mir wer ich bin",
    "sag wer das ist"
  ]
)

@locale(Locale.en_US, Locale.en_GB)
whoAmiExpectInvoke_englisg = utterances(
    samples = [
      "who am i",
      "tell me who i am",
      "tell who is this"
    ]
  )

  whoAmiExpectInvoke = variations(whoAmiExpectInvoke_englisg,whoAmiExpectInvoke_german )

  type thyisIsenGB {
    enGBUSCommon enGBUSName
   }

   type informColorMultipleEventRequestType {
    customColor colorName
  }
  @locale(Locale.en_US, Locale.en_GB)
  informWhopAi_enGBenUS = utterances<thyisIsenGB>(
    samples = [
      "this is {enGBUSName}",
      "{enGBUSName} is this"
    ]
  )

  @locale(Locale.de_DE)
  informWhopAi_german = utterances<thyisIsenGB>(
    samples = [
      "das ist {enGBUSName}",
      "{enGBUSName} ist das"
    ]
)   


@locale(Locale.en_US, Locale.en_GB)
MultipleDialogEvent_enUSenGB = utterances(
  samples = [
    "i want to buy a fruit"
  ]
)

@locale(Locale.en_US, Locale.en_GB)
informColorMultipleEvent_enUSenGB = utterances<informColorMultipleEventRequestType>(
  samples = [
    "color {colorName}",
    "color is {colorName}",
    "{colorName}"
  ]
)



@locale(Locale.de_DE)
informColorMultipleEvent_deDE = utterances<informColorMultipleEventRequestType>(
  samples = [
    "farbe {colorName}",
    "farbe ist {colorName}",
    "{colorName}"
  ]
)


informColorMultipleEvent = variations(informColorMultipleEvent_enUSenGB, informColorMultipleEvent_deDE)


@locale(Locale.de_DE)
MultipleDialogEvent_deDE= utterances(
  samples = [
    "ich m√∂chte eine frucht kaufen"
  ]
)

MultipleDialogEvent = variations(MultipleDialogEvent_enUSenGB, MultipleDialogEvent_deDE)

  
  informWhopAi = variations(informWhopAi_enGBenUS, informWhopAi_german)
  
  


@locale(Locale.en_US, Locale.de_DE, Locale.en_GB)
dialog Nothing WhoAmi {
  sample {
    expect(act = Invoke,event = whoAmiExpectInvoke)
    response(act = Request {  arguments = [   whoAmi.arguments.enGBUSName ]},response = MultiModalResponse {  apla = request_name_apla})
    informWhopAiRequest = expect(act = Inform,event = informWhopAi)
    resultthree0 = whoAmi(enGBUSName = informWhopAiRequest.enGBUSName)
    response(act = Notify {  success = true,  actionName = whoAmi},response = MultiModalResponse {  apla = whoAmiSuccess})
  }
}


dialog Nothing dialogName_MultipleDialogEvent() {  
    sample {
      expect(act = Invoke,event = MultipleDialogEvent)
      response(act = Request {  arguments = [    colorFruitName.arguments.colorName  ]},response = MultiModalResponse {  apla = request_colorName_multiple_apla})
      informColorMultipleEventRequest = expect(act = Inform,event = informColorMultipleEvent)
      response(act = ConfirmArgs {  arguments = [    colorFruitName.arguments.colorName  ]},payload = PAYLOAD_TYPE3 {  colorName = informColorMultipleEventRequest.colorName},response = MultiModalResponse {  apla = confirm_color_for_fruit_apla})
      expect(act = Affirm,event = affirmMultipleColorEvent)
      response(act = ConfirmAction {  actionName = colorFruitName},payload = PAYLOAD_TYPE4 {  colorName = informColorMultipleEventRequest.colorName},response = MultiModalResponse {  apla = response0Prompt16})
      expect(act = Affirm,event = affirmMultipleColorEvent)
      result0 = fruitNameAPI(color = informColorMultipleEventRequest.colorName)
      ensure(requestArgs = [  RequestArguments {    response = MultiModalResponse {      apla = request_colorName_multiple_apla    },    arguments = [      fruitNameAPI.arguments.color    ]  }])
      resultthree0 = colorFruitName(colorName = informColorMultipleEventRequest.colorName)
      response(act = Notify {  success = true,  actionName = colorFruitName},payload = PAYLOAD_TYPE5 {  result = resultthree0},response = MultiModalResponse {  apla = success_fruitPriceAPI_apla,  apl = dummyLastScreen})
    }

    sample {
      // "content": "what is the price of the fruit"
      expect(act = Invoke,event = getFruitPriceEvent)
      response(response = requestArgs_request_fruitName_apla,act = Request {  arguments = [    fruitNameAPI.arguments.fruitName  ]})
      // "content": "fruit name is apple"
      fruitNameEvent = expect(act = Inform,event = informfruitNameEvent)
      //response(response = confirm_fruitName_apla, act = ConfirmArgs {  arguments = [fruitNameAPI.arguments.fruitName]},payload = paylaodCompleFruit {  fruitName = fruitNameEvent.fruitName})
      
     // expect(act = Affirm,event = affirmFruitAPIEvent)
      resultOne = fruitNameAPI(fruitName = fruitNameEvent.fruitName)
      // resposne1()
      response(response = success_fruitPriceAPI_apla,act = Notify {  actionName = fruitNameAPI},payload = payloadgetFruitPriceEvent {  result = resultOne})
      
    }
  }