namespace offerDialogFile

import com.amazon.alexa.ask.conversations.Affirm
import com.amazon.alexa.ask.conversations.CarryOverArgument
import com.amazon.alexa.ask.conversations.Inform
import com.amazon.alexa.ask.conversations.Invoke
import com.amazon.alexa.ask.conversations.Notify
import com.amazon.alexa.ask.conversations.Offer
import com.amazon.alexa.ask.conversations.Request
import com.amazon.alexa.ask.conversations.RequestArguments
import com.amazon.alexa.ask.conversations.ensure
import com.amazon.alexa.ask.conversations.expect
import com.amazon.alexa.ask.conversations.response
import com.amazon.alexa.schema.Nothing
import com.amazon.alexa.schema.Thing
import com.weatherbot.apis.bookCabAPI
import com.weatherbot.apis.bookFlightAPI
import com.weatherbot.types.bookCabResult
import com.weatherbot.types.bookedFlightResult
import com.weatherbot.utteracesets.affirmCabAPIEvent
import com.weatherbot.utteracesets.bookFlightEvent
import com.weatherbot.utteracesets.informFromBookFlight
import com.weatherbot.utteracesets.informPickUpFromBookCab
import com.weatherbot.utteracesets.informToBookFlight
import prompts.requestFromBookFlight_apla
import prompts.requestPickUpFromBookCab_apla
import prompts.requestToBookFlight_apla
import prompts.successBookCabAPI_apla
import prompts.successBookFlightAPI_apla
import slotTypes.*
import prompts.*
import displays.*
import com.weatherbot.utteracesets.*
import com.amazon.alexa.ask.conversations.*
import com.amazon.alexa.schema.*
import com.weatherbot.types.*

type payloadBookFlightAPI {
  bookedFlightResult resultTwo
}

type payloadOfferResult {
  bookCabResult result
}

dialog Nothing complex_two() {
  sample {
    expect(act = Invoke,event = bookFlightEvent)
    response(act = Request {  arguments = [    bookFlightAPI.arguments.source  ]},response = requestFromBookFlight_apla)
    //response(act = Request {  arguments = [    bookFlightAPI.arguments.source  ]},response = requestFromBookFlight_apla)
    // source is seattle
    sourceFlightEvent = expect(act = Inform,event = informFromBookFlight)
    response(act = Request {  arguments = [    bookFlightAPI.arguments.destination  ]},response = requestToBookFlight_apla)
    // destination to portland
    destinationFlightEvent = expect(act = Inform,event = informToBookFlight)
    resultFlightApi = bookFlightAPI(source = sourceFlightEvent.source,destination = destinationFlightEvent.destination)
    response(response = successBookFlightAPI_apla,act = Notify {  actionName = bookFlightAPI,  success = true},payload = payloadBookFlightAPI {  resultTwo = resultFlightApi},nextAct = Offer {  actionName = bookCabAPI,  arguments = [    bookCabAPI.arguments.pickUpFrom  ],  carryOverArguments = [    CarryOverArgument {      argument = bookCabAPI.arguments.dropTo,      source = resultFlightApi.source    }  ]})
    ensure(requestArgs = [  RequestArguments<Thing> {    arguments = [      bookCabAPI.arguments.pickUpFrom    ],    response = requestPickUpFromBookCab_apla  }])
    expect(act = Affirm,event = affirmCabAPIEvent)
    response(response = requestPickUpFromBookCab_apla,act = Request {  arguments = [    bookCabAPI.arguments.pickUpFrom  ]})
    PickUpCabEvent = expect(act = Inform,event = informPickUpFromBookCab)
    resultOne = bookCabAPI(pickUpFrom = PickUpCabEvent.pickUpFrom,dropTo = resultFlightApi.source)
    response(response = successBookCabAPI_apla,act = Notify {  actionName = bookCabAPI},payload = payloadOfferResult {  result = resultOne})
  }
}
