namespace com.numberbot

import com.amazon.alexa.ask.conversations.APLA
import com.amazon.alexa.ask.conversations.Action
import com.amazon.alexa.ask.conversations.Bye
import com.amazon.alexa.ask.conversations.InvocationName
import com.amazon.alexa.ask.conversations.Invoke
import com.amazon.alexa.ask.conversations.Locale
import com.amazon.alexa.ask.conversations.Notify
import com.amazon.alexa.ask.conversations.Offer
import com.amazon.alexa.ask.conversations.RequestArguments
import com.amazon.alexa.ask.conversations.SkillLevelResponses
import com.amazon.alexa.ask.conversations.ensure
import com.amazon.alexa.ask.conversations.expect
import com.amazon.alexa.ask.conversations.response
import com.amazon.alexa.ask.conversations.skill
import com.amazon.alexa.ask.conversations.utterances
import com.amazon.alexa.schema.Nothing
import com.amazon.alexa.schema.Number
import com.amazon.alexa.schema.Thing
import com.amazon.ask.types.builtins.AMAZON.NUMBER
import prompts.AlexaConversationsBye
import prompts.AlexaConversationsOutOfDomain
import prompts.AlexaConversationsProvideHelp
import prompts.AlexaConversationsRequestMore
import prompts.AlexaConversationsWelcome
import prompts.numericfeedback_apla
import prompts.rating_apla
import slotTypes.*
import prompts.*
import displays.*
import com.weatherbot.utteracesets.*
import com.amazon.alexa.ask.conversations.*
import com.amazon.alexa.schema.*
import com.weatherbot.types.*
/*
mySkill = skill(
  locales = [
    Locale.en_US
  ],
  dialogs = [
    MainDialog
  ],
  skillLevelResponses = SkillLevelResponses {
    welcome = AlexaConversationsWelcome,
    out_of_domain = AlexaConversationsOutOfDomain,
    bye = AlexaConversationsBye,
    reqmore = AlexaConversationsRequestMore,
    provide_help = AlexaConversationsProvideHelp
  },
  invocationNames = [
    InvocationName {
      locale = Locale.en_US,
      invocationName = "acdl number feedback bot"
    }
  ]
)

*/

type NumPayload {
  Number num
}

type RatingRequest {
  NUMBER rating
}

InformRatingEvent = utterances<RatingRequest>(
  samples = [
    "my score is {rating}",
    "that was a {rating} conversation",
    "i rate you a {rating}",
    "{rating}"
  ]
)

getStart = utterances(
  samples = [
    "give me a number please"
  ]
)

action Nothing saveRating(Number rating)

action Number getNumber()

dialog Nothing GetFeedback(APLA<Thing> feedback_prompt, Thing payload, Action notifyAction) {
  sample {
    response(
      response = feedback_prompt,
      act = Notify {
        actionName = notifyAction,
        success = true
      },
      nextAct = Offer {
        actionName = saveRating,
        arguments = [
          saveRating.arguments.rating
        ]
      },
      payload = payload
    )
    myRating = expect(
      act = Invoke,
      event = InformRatingEvent
    )
    ensure(
      requestArgs = [
        RequestArguments<Thing> {
          arguments = [
            saveRating.arguments.rating
          ],
          response = rating_apla
        }
      ]
    )
    saveRating(
      rating = myRating.rating
    )
  }
}

dialog Nothing MainDialog() {
  sample {
    expect(
      act = Invoke,
      event = getStart
    )
    num = getNumber()
    GetFeedback(
      feedback_prompt = numericfeedback_apla,
      payload = NumPayload {
        num = num
      },
      notifyAction = getNumber
    )
    response(
      response = AlexaConversationsBye,
      act = Notify {
        actionName = saveRating,
        success = true
      },
      nextAct = Bye {}
    )
  }
}
