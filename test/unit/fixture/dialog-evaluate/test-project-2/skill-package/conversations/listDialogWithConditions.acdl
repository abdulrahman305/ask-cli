namespace listDialog

import com.amazon.alexa.ask.conversations.Affirm
import com.amazon.alexa.ask.conversations.ConfirmAction
import com.amazon.alexa.ask.conversations.ConfirmArgs
import com.amazon.alexa.ask.conversations.Inform
import com.amazon.alexa.ask.conversations.Invoke
import com.amazon.alexa.ask.conversations.Notify
import com.amazon.alexa.ask.conversations.Request
import com.amazon.alexa.ask.conversations.received
import com.amazon.alexa.ask.conversations.confirmAction

import com.amazon.alexa.ask.conversations.expect
import com.amazon.alexa.ask.conversations.response
import com.amazon.alexa.ask.conversations.size
import com.amazon.alexa.ask.conversations.utterances
import com.amazon.alexa.schema.List
import com.amazon.alexa.schema.String
import com.amazon.alexa.schema.Nothing
import com.amazon.ask.types.builtins.AMAZON.Food
import com.amazon.ask.types.builtins.AMAZON.NUMBER
import com.weatherbot.apis.*
import com.weatherbot.apis.fruitNameAPI
import com.weatherbot.apis.numberOfVisits
import com.weatherbot.types.result
import com.weatherbot.utteracesets.GiveMeTodaySpecialsEvent
import com.weatherbot.utteracesets.affirmCookAPIEvent
import com.weatherbot.utteracesets.affirmFruitAPIEvent
import com.weatherbot.utteracesets.cookWithTwoIngredientsEvent
import com.weatherbot.utteracesets.getFruitPriceEvent
import com.weatherbot.utteracesets.informFoodNameEvent
import com.weatherbot.utteracesets.informfruitNameEvent
import prompts.SuccessGiveMeTodaySpecialsEvent_apla
import prompts.confirm_fruitName_apla
import prompts.confirm_main_addon_list_apla
import prompts.requestArgs_request_fruitName_apla
import prompts.request_listAddOns_apla
import prompts.request_mainFoodName_apla
import prompts.success_cookingAPI_apla
import prompts.success_fruitPriceAPI_apla
import slotTypes.orderStatus
import slotTypes.*
import prompts.*
import displays.*
import com.weatherbot.utteracesets.*
import com.amazon.alexa.ask.conversations.*
import com.amazon.alexa.schema.*
import com.weatherbot.types.*
type addOnShell {
  List<Mix> addOn
}

action orderStatus cookingAPI(Food foodName, List<Mix> addOn)

action List<Mix> todaySpecials()

informlistAddOnsEvent = utterances<addOnShell>(
  samples = [
    "{addOn}",
    "add {addOn}",
    "mix {addOn}"
  ]
)

type payloadStatuscookWithTwoIngredients {
  orderStatus status
}

type payloadGiveMeTodaySpecials {
  List<Mix> result
}

type payloadgetFruitPriceEvent {
  result result
}

type payloadConfirmActionComplex {
  optional Food foodName
  List<Mix> addOn
}

type paylaodCompleFruit {
  Food fruitName
}

type WrongpayloadGiveMeTodaySpecialsNew {
  List<Mix> ListOfMix1
  Mix Mix1
}

type payloadGiveMeTodaySpecialsNew {
  List<Mix> ListOfMix1
}


type InteractionFoodName {
  Food foodName
}


interaction {
    received(Invoke,"let us cook")
    response(response = request_listAddOns_apla,act = Request {  arguments = [    cookingAPI.arguments.addOn  ]})
  actual {
  listAddOnsEventOneName = received<WrongpayloadGiveMeTodaySpecialsNew>(Inform, "{bread|ListOfMix1} and {jam|Mix1}")
   } expected {
    listAddOnsEventOne = received<payloadGiveMeTodaySpecialsNew>(Inform, "{bread|ListOfMix1} and {jam|ListOfMix1}")
   }
   response(response = request_mainFoodName_apla,act = Request {  arguments = [ cookingAPI.arguments.foodName  ]})
   FoodNameEventInte = received<InteractionFoodName>(Inform,"{cake|foodName}")
   response(response = confirm_main_addon_list_apla,act = ConfirmAction {  actionName = cookingAPI}, 
    payload = payloadConfirmActionComplex {  foodName = FoodNameEventInte.foodName,  addOn = listAddOnsEventOne.ListOfMix1})
   received(Affirm,"ok for sure")
    resultOneInteList = cookingAPI(foodName = FoodNameEventInte.foodName,addOn = listAddOnsEventOne.ListOfMix1)
    response(response = success_cookingAPI_apla,act = Notify {  actionName = cookingAPI},
      payload = payloadStatuscookWithTwoIngredients {  status = resultOneInteList})
}


dialog Nothing complex() {
  sample {
    expect(act = Invoke,event = cookWithTwoIngredientsEvent)
    response(response = request_listAddOns_apla,act = Request {  arguments = [    cookingAPI.arguments.addOn  ]})
    
    listAddOnsEvent = expect(act = Inform,event = informlistAddOnsEvent)
    response(response = request_mainFoodName_apla,act = Request {  arguments = [    cookingAPI.arguments.foodName  ]})

    FoodNameEvent = expect(act = Inform,event = informFoodNameEvent)
    
    
    response(response = confirm_main_addon_list_apla,act = ConfirmAction {  actionName = cookingAPI},payload = payloadConfirmActionComplex {  foodName = FoodNameEvent.foodName,  addOn = listAddOnsEvent.addOn})
    // ok for sure 
    expect(act = Affirm,event = affirmCookAPIEvent)

    resultOne = cookingAPI(foodName = FoodNameEvent.foodName,addOn = listAddOnsEvent.addOn)

    response(response = success_cookingAPI_apla,act = Notify {  actionName = cookingAPI},
      payload = payloadStatuscookWithTwoIngredients {  status = resultOne})
  }




  


  sample {
    expect(act = Invoke,event = GiveMeTodaySpecialsEvent)
    numberOfVisits()
    resultOne = todaySpecials()
    if (com.amazon.alexa.ask.conversations.size(list = resultOne) == 1) {
      response(response = SuccessGiveMeTodaySpecialsEvent_apla,  act = Notify {    actionName = todaySpecials  },  payload = payloadGiveMeTodaySpecials {    result = resultOne  })
    }
  }





  sample {
    // "content": "what is the price of the fruit"
    expect(act = Invoke,event = getFruitPriceEvent)
    response(response = requestArgs_request_fruitName_apla,act = Request {  arguments = [    fruitNameAPI.arguments.fruitName  ]})
    // "content": "fruit name is apple"
    fruitNameEvent = expect(act = Inform,event = informfruitNameEvent)
    //response(response = confirm_fruitName_apla, act = ConfirmArgs {  arguments = [fruitNameAPI.arguments.fruitName]},payload = paylaodCompleFruit {  fruitName = fruitNameEvent.fruitName})
    
   // expect(act = Affirm,event = affirmFruitAPIEvent)
    resultOne = fruitNameAPI(fruitName = fruitNameEvent.fruitName)
    // resposne1()
    response(response = success_fruitPriceAPI_apla,act = Notify {  actionName = fruitNameAPI},payload = payloadgetFruitPriceEvent {  result = resultOne})
    
  }
}




  /*
type fruitEvent0 {
  Food fruitName
}

interaction {
  actual {
    fruitNameEvent1 = received<fruitEvent0>(Inform, "fruit name is {apple|fruitName}")
    resultOneTwo = fruitNameAPI(fruitName = fruitNameEvent1.fruitName)
    response(response = success_fruitPriceAPI_apla,act = Notify {  actionName = fruitNameAPI},payload = payloadgetFruitPriceEvent {  result = resultOneTwo})
     } expected {
    fruitNameEvent1 = received<fruitEvent0>(Inform, "fruit name is {apple|fruitName}")
    resultOne = todaySpecials()
    if (com.amazon.alexa.ask.conversations.size(list = resultOne) == 1) {
      response(response = SuccessGiveMeTodaySpecialsEvent_apla,  act = Notify {    actionName = todaySpecials  },  payload = payloadGiveMeTodaySpecials {    result = resultOne  })
    }
    }
  }

interaction {
     
  actual {
   
   
    fruitNameEvent1 = received<fruitEvent0>(Inform, "fruit name is {apple|fruitName}")
    resultOneTwo = fruitNameAPI(fruitName = fruitNameEvent1.fruitName)
    response(response = success_fruitPriceAPI_apla,act = Notify {  actionName = fruitNameAPI},payload = payloadgetFruitPriceEvent {  result = resultOneTwo})
     } expected {
        fruitNameEvent1 = received<fruitEvent0>(Inform, "fruit name is {apple|fruitName}")
     }
  
  }











interaction {
     
actual {
 
 
  fruitNameEvent1 = received<fruitEvent0>(Inform, "fruit name is {apple|fruitName}")
  response(response = confirm_fruitName_apla,act = ConfirmArgs {  arguments = [    fruitNameAPI.arguments.fruitName  ]},
    payload = paylaodCompleFruit {  fruitName = fruitNameEvent1.fruitName})
 
   } expected {
      fruitNameEvent1 = received<fruitEvent0>(Inform, "fruit name is {apple|fruitName}")
   response(response = request_mainFoodName_apla, act = ConfirmAction { actionName = fruitNameAPI} ,
     payload = paylaodCompleFruit {  fruitName = fruitNameEvent1.fruitName})
   }

}
*/




  