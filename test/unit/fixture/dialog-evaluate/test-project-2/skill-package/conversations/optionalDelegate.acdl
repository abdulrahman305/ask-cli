namespace optionalArgACDL

import com.amazon.alexa.ask.conversations.Affirm
import com.amazon.alexa.ask.conversations.ConfirmArgs
import com.amazon.alexa.ask.conversations.Inform
import com.amazon.alexa.ask.conversations.Invoke
import com.amazon.alexa.ask.conversations.MultiModalResponse
import com.amazon.alexa.ask.conversations.Notify
import com.amazon.alexa.ask.conversations.Request
import com.amazon.alexa.ask.conversations.expect
import com.amazon.alexa.ask.conversations.response
import com.amazon.alexa.schema.Nothing
import com.amazon.alexa.schema.Thing
import com.weatherbot.apis.favColorSign_Name
import com.weatherbot.types.payloadConfirmActionConditionComplex
import com.weatherbot.types.result_one
import com.weatherbot.utteracesets.affirmFavColorEvent

import com.weatherbot.utteracesets.informComplexNameEvent
import prompts.request_name_apla
import prompts.success_favColorSign_Name_apla
import slotTypes.complexNames
import slotTypes.*
import prompts.*
import displays.*
import com.weatherbot.utteracesets.*
import com.amazon.alexa.ask.conversations.*
import com.amazon.alexa.schema.*
import com.weatherbot.types.*
type payloadResult_optional {
  result_one result
}

type payloadResult_optional_name {
  complexNames name
}



// 1. New Prompt we cant map (Not used within any samples))
// 2. New DialogACtType alone we cant map , should be done with apla prompts
// 3. WE can make use of an exisitng apla prompt and change type  -> Shoudl be .
// 4. Payload Can be changed


getFavColorEvent = utterances(
  samples = [
    "what is my favourite color",
    "tell my favourite color"
  ]
)


getFavColorEventTwo = utterances(
  samples = [
    "guess the color"
  ]
)


dialog Nothing optiOnal() {
  sample {
    expect(act = Invoke,event = getFavColorEvent)
    response(act = Request {  arguments = [    favColorSign_Name.arguments.name  ]},response = MultiModalResponse<Thing> {  apla = request_name_apla})
    
    ComplexNameEvent = expect(act = Inform,event = informComplexNameEvent)
    response(response = confirmArgs_complexNames_apla, act = ConfirmArgs {  arguments = [    favColorSign_Name.arguments.name  ]},
      payload = payloadConfirmActionConditionComplex {  name = ComplexNameEvent.name})
    
    expect(act = Affirm,event = affirmFavColorEvent)
    resultOne = favColorSign_Name(name = ComplexNameEvent.name) 
    response(response = success_favColorSign_Name_apla,act = Notify {  actionName = favColorSign_Name}, 
      payload = payloadResult_optional {  result = resultOne})
  }
}

type PAYLOAD_TYPE01 { complexNames name}

dialog Nothing optiOnalTwo() {
  sample {
    expect(act = Invoke,event = getFavColorEventTwo)
    response(act = Request {  arguments = [    favColorSign_Name.arguments.name  ]},response = MultiModalResponse<Thing> {  apla = request_name_apla})
    
    ComplexNameEvent = expect(act = Inform,event = informComplexNameEvent)
    response(response = confirmAction_complexNames_apla, act = ConfirmAction {actionName = favColorSign_Name}, payload = payloadConfirmActionConditionComplex {  name = ComplexNameEvent.name})
    
    expect(act = Affirm,event = affirmFavColorEvent)
    result1 = favColorSign_Name(name = ComplexNameEvent.name) 
    response(response = success_favColorSign_Name_apla,act = Notify {  actionName = favColorSign_Name}, payload = payloadResult_optional {  result = result1})
  }
}



//com.amazon.alexa.ask.conversations.response( response = confirmArgs_complexNames_apla, act = com.amazon.alexa.ask.conversations.ConfirmArgs {arguments = [com.weatherbot.apis.favColorSign_Name.arguments.name ]}, surfaceForm = "confirm Action your cool name satheesh and ?", payload = PAYLOAD_TYPE1{name = Var1.complexNames1})

/*
com.amazon.alexa.ask.conversations.response( response = confirmArgs_complexNames_apla, act = com.amazon.alexa.ask.conversations.ConfirmArgs {  arguments = [com.weatherbot.apis.favColorSign_Name.arguments.name ]}, surfaceForm = "", payload = PAYLOAD_TYPE0{complexNames = Var0.complexNames1})

com.amazon.alexa.ask.conversations.response( response = confirmArgs_complexNames_apla, act = com.amazon.alexa.ask.conversations.ConfirmArgs {  arguments = [    favColorSign_Name.arguments.name  ]}, surfaceForm = "", payload = Type0( complexNames = Var0.complexNames1 ))

type nameShellInteract {
  complexNames name
}
interaction {
  actual {
    ComplexNameEvent1 = received<nameShellInteract>(Inform, "name is {satheesh|name}")
    response(response = confirmAction_complexNames_apla, act = ConfirmAction {actionName = favColorSign_Name},
      payload = payloadConfirmActionConditionComplex {  name = ComplexNameEvent1.name})
     } expected {
      ComplexNameEvent1 = received<nameShellInteract>(Inform, "name is {satheesh|name}")
      response(response = confirmArgs_complexNames_apla, act = ConfirmArgs {  arguments = [    favColorSign_Name.arguments.name  ]},
        payload = payloadConfirmActionConditionComplex {  name = ComplexNameEvent1.name})
    }
  }

*/
  