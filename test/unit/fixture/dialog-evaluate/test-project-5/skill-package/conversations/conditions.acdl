namespace conditionsACDlFile

import com.amazon.alexa.ask.conversations.Inform
import com.amazon.alexa.ask.conversations.Invoke
import com.amazon.alexa.ask.conversations.MultiModalResponse
import com.amazon.alexa.ask.conversations.Notify
import com.amazon.alexa.ask.conversations.Offer
import com.amazon.alexa.ask.conversations.ReqAlt
import com.amazon.alexa.ask.conversations.Request
import com.amazon.alexa.ask.conversations.RequestArguments
import com.amazon.alexa.ask.conversations.ensure
import com.amazon.alexa.ask.conversations.expect
import com.amazon.alexa.ask.conversations.response
import com.amazon.alexa.ask.conversations.size
import com.amazon.alexa.schema.Nothing
import com.amazon.alexa.schema.Thing
import com.weatherbot.apis.favColorSign_Name
import com.weatherbot.apis.getWeather
import com.weatherbot.types.WeatherResult
import com.weatherbot.types.result_one
import com.weatherbot.utteracesets.getWeatherEventNoArgs
import com.weatherbot.utteracesets.informCityEvent
import com.weatherbot.utteracesets.informComplexNameEvent
import com.weatherbot.utteracesets.informDateEvent
import displays.request_city_apl_display
import prompts.request_city_apla
import prompts.request_date_apla
import prompts.request_name_apla
import prompts.success_favColorSign_Name_apla
import prompts.weather_success_apla

type payload_one {
  result_one result
}

type payload_one_two {
  WeatherResult weatherResult
}

dialog Nothing conditionComplex() {
  sample {
    expect(
      Invoke,
      getWeatherEventNoArgs
    )
    request_city_multimodal = MultiModalResponse<Thing> {
      apla = request_city_apla,
      apl = request_city_apl_display
    }
    request_date_multimodal = MultiModalResponse<Thing> {
      apla = request_date_apla,
      apl = request_city_apl_display
    }
    response(
      request_city_multimodal,
      Request {
        arguments = [
          getWeather.arguments.cityName
        ]
      },
      nothing,
      nothing,
      nothing
    )
    cityEvent = expect(
      Inform,
      informCityEvent
    )
    response(
      request_date_multimodal,
      Request {
        arguments = [
          getWeather.arguments.date
        ]
      },
      nothing,
      nothing,
      nothing
    )
    dateEvent = expect(
      Inform,
      informDateEvent
    )
    weatherResult = getWeather(
      cityEvent.cityName,
      dateEvent.date
    )
    if (((weatherResult.highTemp < 3 && weatherResult.lowTemp > 0) && size(
      weatherResult.itemsToUse
    ) > 1)) {
      response(
        weather_success_apla,
        Notify {
          actionName = getWeather
        },
        Offer {
          actionName = favColorSign_Name,
          arguments = [
            favColorSign_Name.arguments.name
          ]
        },
        nothing,
        nothing
      )
      ensure(
        RequestArguments<Thing> {
            arguments = [
              favColorSign_Name.arguments.name
            ],
            response = request_name_apla
          }
      )
      ComplexNameEvent = expect(
        Inform,
        informComplexNameEvent
      )
      resultOne_one = favColorSign_Name(
        ComplexNameEvent.name
      )
      response(
        success_favColorSign_Name_apla,
        Notify {
          actionName = favColorSign_Name
        },
        nothing,
        payload_one {
          result = resultOne_one
        },
        nothing
      )
    } else {
      response(
        weather_success_apla,
        Notify {
          actionName = getWeather,
          success = false
        },
        ReqAlt {
          arguments = [
            getWeather.arguments.cityName
          ]
        },
        payload_one_two {
          weatherResult = weatherResult
        },
        nothing
      )
      cityEvent_new = expect(
        Inform,
        informCityEvent
      )
      weatherResult_two = getWeather(
        cityEvent_new.cityName,
        dateEvent.date
      )
      successAPLWithAPLsa_nw = MultiModalResponse<Thing> {
        apla = weather_success_apla
      }
      response(
        successAPLWithAPLsa_nw,
        Notify {
          actionName = getWeather
        },
        nothing,
        payload_one_two {
          weatherResult = weatherResult_two
        },
        nothing
      )
    }
  }
}
