namespace offerDialogFile

import com.amazon.alexa.ask.conversations.Affirm
import com.amazon.alexa.ask.conversations.CarryOverArgument
import com.amazon.alexa.ask.conversations.Inform
import com.amazon.alexa.ask.conversations.Invoke
import com.amazon.alexa.ask.conversations.Notify
import com.amazon.alexa.ask.conversations.Offer
import com.amazon.alexa.ask.conversations.Request
import com.amazon.alexa.ask.conversations.expect
import com.amazon.alexa.ask.conversations.response
import com.amazon.alexa.schema.Nothing
import com.weatherbot.apis.bookCabAPI
import com.weatherbot.apis.bookFlightAPI
import com.weatherbot.types.bookCabResult
import com.weatherbot.types.bookedFlightResult
import com.weatherbot.utteracesets.affirmCabAPIEvent
import com.weatherbot.utteracesets.bookFlightEvent
import com.weatherbot.utteracesets.informFromBookFlight
import com.weatherbot.utteracesets.informPickUpFromBookCab
import com.weatherbot.utteracesets.informToBookFlight
import prompts.requestFromBookFlight_apla
import prompts.requestPickUpFromBookCab_apla
import prompts.requestToBookFlight_apla
import prompts.successBookCabAPI_apla
import prompts.successBookFlightAPI_apla

type payloadBookFlightAPI {
  bookedFlightResult resultTwo
}

type payloadOfferResult {
  bookCabResult result
}

dialog Nothing complex_two() {
  sample {
    expect(
      Invoke,
      bookFlightEvent
    )
    response(
      requestFromBookFlight_apla,
      Request {
        arguments = [
          bookFlightAPI.arguments.source
        ]
      },
      nothing,
      nothing,
      nothing
    )
    sourceFlightEvent = expect(
      Inform,
      informFromBookFlight
    )
    response(
      requestToBookFlight_apla,
      Request {
        arguments = [
          bookFlightAPI.arguments.destination
        ]
      },
      nothing,
      nothing,
      nothing
    )
    destinationFlightEvent = expect(
      Inform,
      informToBookFlight
    )
    resultFlightApi = bookFlightAPI(
      sourceFlightEvent.source,
      destinationFlightEvent.destination
    )
    response(
      successBookFlightAPI_apla,
      Notify {
        actionName = bookFlightAPI,
        success = true
      },
      Offer {
        actionName = bookCabAPI,
        arguments = [
          bookCabAPI.arguments.pickUpFrom
        ],
        carryOverArguments = [
          CarryOverArgument {
            argument = bookCabAPI.arguments.dropTo,
            source = resultFlightApi.source
          }
        ]
      },
      payloadBookFlightAPI {
        resultTwo = resultFlightApi
      },
      nothing
    )
    expect(
      Affirm,
      affirmCabAPIEvent
    )
    response(
      requestPickUpFromBookCab_apla,
      Request {
        arguments = [
          bookCabAPI.arguments.pickUpFrom
        ]
      },
      nothing,
      nothing,
      nothing
    )
    PickUpCabEvent = expect(
      Inform,
      informPickUpFromBookCab
    )
    resultOne = bookCabAPI(
      PickUpCabEvent.pickUpFrom,
      resultFlightApi.source
    )
    response(
      successBookCabAPI_apla,
      Notify {
        actionName = bookCabAPI
      },
      nothing,
      payloadOfferResult {
        result = resultOne
      },
      nothing
    )
  }
}
